{
	"Segment Tree iterativo": {
		"prefix": "stIterativo",
		"body": [
		  "#define neutro  0",
		  "struct nodo {",
		  "    ll valor = neutro;",
		  "",
		  "    nodo(ll v) : valor(v) {}",
		  "    nodo() {}",
		  "",
		  "    nodo operator+(const nodo &b) {",
		  "        nodo res;",
		  "",
		  "        res.valor = valor + b.valor;",
		  "",
		  "        return res;",
		  "    }",
		  "};",
		  "",
		  "template<typename T>",
		  "struct SegmentTree {",
		  "    int n;",
		  "    vector<nodo> st;",
		  "",
		  "    SegmentTree(int n, vector<T> a) : n(n) {",
		  "        st.resize(n << 1);",
		  "        for(int i = 0; i < n; i++)",
		  "            st[n + i] = nodo(a[i]);",
		  "        for(int i = n - 1; i > 0; i--)",
		  "            st[i] = st[i << 1] + st[i << 1 | 1];",
		  "    }",
		  "",
		  "    void update(int i, T v) {",
		  "        for (st[i += n] = nodo(v); i >>= 1; )",
		  "            st[i] = st[i << 1] + st[i << 1 | 1];",
		  "    }",
		  "",
		  "    nodo query(int l, int r) {//[l, r)",
		  "        nodo resl, resr;",
		  "        for(l += n, r += n; l < r; l >>= 1, r >>= 1) {",
		  "            if(l & 1)   resl = resl + st[l++];",
		  "            if(r & 1)   resr = st[--r] + resr;",
		  "        }",
		  "        return resl + resr;",
		  "    }",
		  "",
		  "    void imp() {",
		  "        for(auto x: st) {",
		  "            cerr << x.valor << \" \";",
		  "        }",
		  "        cerr << \"\\n\";",
		  "    }",
		  "};"
		],
		"description": "Segment Tree iterativo"
	  }
}