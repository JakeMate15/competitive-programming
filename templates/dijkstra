{
	"Camino mas corto con dijkstra": {
		"prefix": "dijkstra",
		"body": [
		  "vector<vector<pair<int, ll>>> g;",
		  "const ll INF = LONG_LONG_MAX;",
		  "vector<ll> d;",
		  "vector<int> p;",
		  "",
		  "void dijkstra(int s) {",
		  "    int n = g.size();",
		  "    d.assign(n, INF);",
		  "    p.assign(n, 0);",
		  "",
		  "    d[s] = 0;",
		  "    set<pair<ll, int>> q;",
		  "    q.insert({0, s});",
		  "    while (!q.empty()) {",
		  "        int v = q.begin()->second;",
		  "        q.erase(q.begin());",
		  "",
		  "        for (auto edge : g[v]) {",
		  "            int to = edge.first;",
		  "            ll len = edge.second;",
		  "",
		  "            if (d[v] + len < d[to]) {",
		  "                q.erase({d[to], to});",
		  "                d[to] = d[v] + len;",
		  "                p[to] = v;",
		  "                q.insert({d[to], to});",
		  "            }",
		  "        }",
		  "    }",
		  "}",
		  "",
		  "// Camino mas cortes de s a t",
		  "vector<int> restore_path(int s, int t) {",
		  "    vector<int> res = {t};",
		  "",
		  "    while(p[t]) {",
		  "        res.push_back(p[t]);",
		  "        t = p[t];",
		  "    }",
		  "",
		  "    reverse(all(res));",
		  "    return (t == s ? res : vector<int>());",
		  "}"
		],
		"description": "Camino mas corto con dijkstra"
	  }
}