{
	"DSU Structure": {
		"prefix": "dsu",
		"body": [
			"struct DSU {",
			"    vector<int> par;",
			"    vector<int> rank; // rank[x] = size of the component where x belongs",
			"    int tam;",
			" ",
			"    DSU(int n) {",
			"        par.resize(n + 1);",
			"        rank.resize(n + 1);",
			"        tam = n;",
			"        for (int i = 1; i <= n; i++) {",
			"            par[i] = i;",
			"            rank[i] = 1;",
			"        }",
			"    }",
			" ",
			"    int find(int x) {",
			"        if (par[x] == x) {",
			"            return x;",
			"        } ",
			"        else {",
			"            return (par[x] = find(par[x])); // Path Compression",
			"        }",
			"    }",
			" ",
			"    void unite(int x, int y) {",
			"        int rootx = find(x);",
			"        int rooty = find(y);",
			"        if (rootx == rooty) {",
			"            // both elements are in the same component",
			"            return;",
			"        }",
			"        if (rank[rootx] < rank[rooty]) { // Rank Compression",
			"            swap(rootx, rooty);",
			"        }",
			"        rank[rootx] += rank[rooty];",
			"        par[rooty] = rootx;",
			"        tam--;",
			"    }",
			"",
			"    bool same(int u, int v){",
			"        return find(u) == find(v);",
			"    }",
			"};"
		],
		"description": "Estructura de Union-Find / Disjoint Set Union"
	}
}
